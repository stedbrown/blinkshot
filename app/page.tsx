'use client'

import React, { useState, useEffect } from 'react'
import { useQuery } from '@tanstack/react-query'
import { useDebounce } from '@uidotdev/usehooks'
import { Loader2, Sparkles, Settings, Wand2, Download, Share2, Heart, Zap, ChevronDown, ChevronUp, Shuffle, Lock, Unlock } from 'lucide-react'
import LoadingSpinner from './components/LoadingSpinner'
import ClientOnly from './components/ClientOnly'

interface Particle {
  id: number
  left: string
  top: string
  animationDelay: string
  animationDuration: string
}

interface GenerationParams {
  steps: number
  width: number
  height: number
  seed: number | null
  model: string
}

export default function Page() {
  const [prompt, setPrompt] = useState('')
  const [consistencyMode, setConsistencyMode] = useState(false)
  const [showAdvanced, setShowAdvanced] = useState(false)
  const [seedLocked, setSeedLocked] = useState(false)
  const [particles, setParticles] = useState<Particle[]>([])
  const [generationParams, setGenerationParams] = useState<GenerationParams>({
    steps: 3,
    width: 1024,
    height: 768,
    seed: null,
    model: 'black-forest-labs/FLUX.1-schnell'
  })
  const debouncedPrompt = useDebounce(prompt, 300)

  // Generate particles only on client side
  useEffect(() => {
    const generatedParticles: Particle[] = Array.from({ length: 20 }, (_, i) => ({
      id: i,
      left: `${Math.random() * 100}%`,
      top: `${Math.random() * 100}%`,
      animationDelay: `${Math.random() * 5}s`,
      animationDuration: `${3 + Math.random() * 4}s`
    }))
    setParticles(generatedParticles)
  }, [])

  // Generate random seed
  const generateRandomSeed = () => {
    const newSeed = Math.floor(Math.random() * 1000000)
    setGenerationParams(prev => ({ ...prev, seed: newSeed }))
  }

  // Get effective seed for generation
  const getEffectiveSeed = () => {
    if (seedLocked && generationParams.seed !== null) {
      return generationParams.seed
    }
    if (consistencyMode) {
      return 123 // Default consistency seed
    }
    return null // Random seed
  }

  const { data, isLoading, error } = useQuery({
    queryKey: [debouncedPrompt, getEffectiveSeed(), generationParams.steps, generationParams.width, generationParams.height, generationParams.model],
    queryFn: async () => {
      const res = await fetch('/api/generateImage', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ 
          prompt: debouncedPrompt,
          seed: getEffectiveSeed(),
          steps: generationParams.steps,
          width: generationParams.width,
          height: generationParams.height,
          model: generationParams.model
        }),
      })
      
      if (!res.ok) {
        throw new Error('Failed to generate image')
      }
      
      const json = await res.json()
      
      // Update seed if it was generated by the API
      if (!seedLocked && !consistencyMode && json.seed) {
        setGenerationParams(prev => ({ ...prev, seed: json.seed }))
      }
      
      return json
    },
    enabled: !!debouncedPrompt.trim(),
    staleTime: Infinity,
    retry: false,
  })

  const downloadImage = () => {
    if (data?.b64_json) {
      const link = document.createElement('a')
      link.href = `data:image/png;base64,${data.b64_json}`
      link.download = `blinkshot-${Date.now()}.png`
      link.click()
    }
  }

  const shareImage = async () => {
    if (navigator.share && data?.b64_json) {
      try {
        const response = await fetch(`data:image/png;base64,${data.b64_json}`)
        const blob = await response.blob()
        const file = new File([blob], 'blinkshot-image.png', { type: 'image/png' })
        
        await navigator.share({
          title: 'BlinkShot Generated Image',
          text: `Check out this image I generated with BlinkShot: "${prompt}"`,
          files: [file]
        })
      } catch (error) {
        console.log('Error sharing:', error)
      }
    }
  }

  const presetSizes = [
    { name: 'Square', width: 1024, height: 1024 },
    { name: 'Landscape', width: 1024, height: 768 },
    { name: 'Portrait', width: 768, height: 1024 },
    { name: 'Wide', width: 1344, height: 768 },
    { name: 'Tall', width: 768, height: 1344 }
  ]

  return (
    <ClientOnly>
      <div className="min-h-screen bg-gradient-to-br from-indigo-900 via-purple-900 to-pink-900 relative overflow-hidden">
        {/* Animated background elements */}
        <div className="absolute inset-0 overflow-hidden">
          <div className="absolute -top-40 -right-40 w-80 h-80 bg-purple-500 rounded-full mix-blend-multiply filter blur-xl opacity-20 animate-pulse"></div>
          <div className="absolute -bottom-40 -left-40 w-80 h-80 bg-pink-500 rounded-full mix-blend-multiply filter blur-xl opacity-20 animate-pulse animation-delay-2000"></div>
          <div className="absolute top-40 left-1/2 w-80 h-80 bg-indigo-500 rounded-full mix-blend-multiply filter blur-xl opacity-20 animate-pulse animation-delay-4000"></div>
        </div>

        {/* Floating particles */}
        <div className="absolute inset-0">
          {particles.map((particle) => (
            <div
              key={particle.id}
              className="absolute w-2 h-2 bg-white rounded-full opacity-10 animate-float"
              style={{
                left: particle.left,
                top: particle.top,
                animationDelay: particle.animationDelay,
                animationDuration: particle.animationDuration
              }}
            />
          ))}
        </div>

        <div className="relative z-10 p-4 md:p-8">
          <div className="max-w-6xl mx-auto">
            {/* Header */}
            <div className="text-center mb-12 animate-fadeInUp">
              <div className="flex items-center justify-center gap-3 mb-6">
                <div className="relative">
                  <Wand2 className="w-12 h-12 text-white drop-shadow-lg animate-bounce" />
                  <div className="absolute -top-1 -right-1 w-4 h-4 bg-yellow-400 rounded-full animate-ping"></div>
                </div>
                <h1 className="text-6xl md:text-7xl font-bold bg-gradient-to-r from-white via-purple-200 to-pink-200 bg-clip-text text-transparent drop-shadow-2xl">
                  BlinkShot
                </h1>
                <Heart className="w-8 h-8 text-pink-400 animate-pulse" />
              </div>
              <p className="text-xl md:text-2xl text-purple-100 font-light max-w-3xl mx-auto leading-relaxed">
                ✨ Transform your words into visual art with artificial intelligence ✨
              </p>
              <div className="flex items-center justify-center gap-2 mt-4 text-purple-200">
                <Zap className="w-5 h-5 text-yellow-400" />
                <span className="text-sm">Powered by FLUX.1 & Together AI</span>
              </div>
            </div>

            {/* Main Content Grid */}
            <div className="grid lg:grid-cols-2 gap-8 items-start">
              
              {/* Controls Panel */}
              <div className="space-y-6 animate-slideInLeft">
                <div className="bg-white/10 backdrop-blur-xl rounded-3xl p-8 border border-white/20 shadow-2xl hover-lift">
                  <div className="flex items-center gap-3 mb-6">
                    <Settings className="w-6 h-6 text-purple-300" />
                    <h2 className="text-2xl font-bold text-white">Creative Controls</h2>
                  </div>

                  <div className="space-y-6">
                    {/* Basic Controls */}
                    <div className="flex items-center justify-between p-4 bg-white/5 rounded-2xl border border-white/10 hover:bg-white/10 transition-all duration-300">
                      <div className="flex items-center gap-3">
                        <Sparkles className="w-5 h-5 text-purple-300" />
                        <div>
                          <span className="text-white font-medium">Consistency Mode</span>
                          <p className="text-purple-200 text-sm">Images that build upon each other</p>
                        </div>
                      </div>
                      <label className="relative inline-flex items-center cursor-pointer">
                        <input
                          type="checkbox"
                          checked={consistencyMode}
                          onChange={(e) => setConsistencyMode(e.target.checked)}
                          className="sr-only peer"
                        />
                        <div className="w-14 h-7 bg-white/20 peer-focus:outline-none rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-0.5 after:left-[4px] after:bg-white after:rounded-full after:h-6 after:w-6 after:transition-all peer-checked:bg-gradient-to-r peer-checked:from-purple-500 peer-checked:to-pink-500 hover:shadow-glow"></div>
                      </label>
                    </div>

                    {/* Advanced Controls Toggle */}
                    <button
                      onClick={() => setShowAdvanced(!showAdvanced)}
                      className="w-full flex items-center justify-between p-4 bg-white/5 rounded-2xl border border-white/10 hover:bg-white/10 transition-all duration-300"
                    >
                      <div className="flex items-center gap-3">
                        <Settings className="w-5 h-5 text-cyan-300" />
                        <span className="text-white font-medium">Advanced Settings</span>
                      </div>
                      {showAdvanced ? (
                        <ChevronUp className="w-5 h-5 text-cyan-300" />
                      ) : (
                        <ChevronDown className="w-5 h-5 text-cyan-300" />
                      )}
                    </button>

                    {/* Advanced Controls */}
                    {showAdvanced && (
                      <div className="space-y-4 animate-scaleIn">
                        {/* Seed Control */}
                        <div className="p-4 bg-white/5 rounded-2xl border border-white/10">
                          <div className="flex items-center justify-between mb-3">
                            <label className="text-white font-medium flex items-center gap-2">
                              {seedLocked ? <Lock className="w-4 h-4 text-yellow-400" /> : <Unlock className="w-4 h-4 text-gray-400" />}
                              Seed Control
                            </label>
                            <div className="flex gap-2">
                              <button
                                onClick={() => setSeedLocked(!seedLocked)}
                                className={`p-2 rounded-lg transition-all duration-200 ${
                                  seedLocked 
                                    ? 'bg-yellow-500/20 text-yellow-400 hover:bg-yellow-500/30' 
                                    : 'bg-white/10 text-gray-400 hover:bg-white/20'
                                }`}
                                title={seedLocked ? "Unlock seed" : "Lock seed"}
                              >
                                {seedLocked ? <Lock className="w-4 h-4" /> : <Unlock className="w-4 h-4" />}
                              </button>
                              <button
                                onClick={generateRandomSeed}
                                className="p-2 bg-white/10 hover:bg-white/20 rounded-lg text-purple-300 transition-all duration-200"
                                title="Generate random seed"
                              >
                                <Shuffle className="w-4 h-4" />
                              </button>
                            </div>
                          </div>
                          <input
                            type="number"
                            value={generationParams.seed || ''}
                            onChange={(e) => setGenerationParams(prev => ({ 
                              ...prev, 
                              seed: e.target.value ? parseInt(e.target.value) : null 
                            }))}
                            placeholder="Random seed"
                            className="w-full p-3 bg-white/10 border border-white/20 rounded-xl text-white placeholder-purple-200 focus:ring-2 focus:ring-cyan-400 focus:border-transparent outline-none"
                          />
                          <p className="text-purple-200 text-xs mt-2">
                            {seedLocked ? "Seed is locked - same seed will be used for all generations" : "Leave empty for random seed"}
                          </p>
                        </div>

                        {/* Steps Control */}
                        <div className="p-4 bg-white/5 rounded-2xl border border-white/10">
                          <label className="text-white font-medium mb-3 block">
                            Generation Steps: {generationParams.steps}
                          </label>
                          <input
                            type="range"
                            min="1"
                            max="8"
                            value={generationParams.steps}
                            onChange={(e) => setGenerationParams(prev => ({ 
                              ...prev, 
                              steps: parseInt(e.target.value) 
                            }))}
                            className="w-full h-2 bg-white/20 rounded-lg appearance-none cursor-pointer slider"
                          />
                          <div className="flex justify-between text-xs text-purple-200 mt-1">
                            <span>Fast (1)</span>
                            <span>Balanced (4)</span>
                            <span>Quality (8)</span>
                          </div>
                        </div>

                        {/* Image Size Presets */}
                        <div className="p-4 bg-white/5 rounded-2xl border border-white/10">
                          <label className="text-white font-medium mb-3 block">Image Size</label>
                          <div className="grid grid-cols-2 gap-2 mb-3">
                            {presetSizes.map((preset) => (
                              <button
                                key={preset.name}
                                onClick={() => setGenerationParams(prev => ({ 
                                  ...prev, 
                                  width: preset.width, 
                                  height: preset.height 
                                }))}
                                className={`p-2 rounded-lg text-sm transition-all duration-200 ${
                                  generationParams.width === preset.width && generationParams.height === preset.height
                                    ? 'bg-cyan-500/20 text-cyan-300 border border-cyan-400/30'
                                    : 'bg-white/10 text-purple-200 hover:bg-white/20'
                                }`}
                              >
                                {preset.name}
                                <div className="text-xs opacity-70">{preset.width}×{preset.height}</div>
                              </button>
                            ))}
                          </div>
                          <div className="grid grid-cols-2 gap-2">
                            <div>
                              <label className="text-purple-200 text-xs">Width</label>
                              <input
                                type="number"
                                value={generationParams.width}
                                onChange={(e) => setGenerationParams(prev => ({ 
                                  ...prev, 
                                  width: parseInt(e.target.value) || 1024 
                                }))}
                                className="w-full p-2 bg-white/10 border border-white/20 rounded-lg text-white text-sm focus:ring-2 focus:ring-cyan-400 focus:border-transparent outline-none"
                                min="512"
                                max="1344"
                                step="64"
                              />
                            </div>
                            <div>
                              <label className="text-purple-200 text-xs">Height</label>
                              <input
                                type="number"
                                value={generationParams.height}
                                onChange={(e) => setGenerationParams(prev => ({ 
                                  ...prev, 
                                  height: parseInt(e.target.value) || 768 
                                }))}
                                className="w-full p-2 bg-white/10 border border-white/20 rounded-lg text-white text-sm focus:ring-2 focus:ring-cyan-400 focus:border-transparent outline-none"
                                min="512"
                                max="1344"
                                step="64"
                              />
                            </div>
                          </div>
                        </div>

                        {/* Model Selection */}
                        <div className="p-4 bg-white/5 rounded-2xl border border-white/10">
                          <label className="text-white font-medium mb-3 block">Model</label>
                          <select
                            value={generationParams.model}
                            onChange={(e) => setGenerationParams(prev => ({ 
                              ...prev, 
                              model: e.target.value 
                            }))}
                            className="w-full p-3 bg-white/10 border border-white/20 rounded-xl text-white focus:ring-2 focus:ring-cyan-400 focus:border-transparent outline-none"
                          >
                            <option value="black-forest-labs/FLUX.1-schnell">FLUX.1 [schnell] - Fast</option>
                            <option value="black-forest-labs/FLUX.1-dev">FLUX.1 [dev] - High Quality</option>
                          </select>
                          <p className="text-purple-200 text-xs mt-2">
                            Schnell is faster, Dev provides higher quality but takes longer
                          </p>
                        </div>
                      </div>
                    )}

                    {/* Prompt Input */}
                    <div className="space-y-3">
                      <label className="text-white font-medium flex items-center gap-2">
                        <Wand2 className="w-4 h-4" />
                        Describe your vision
                      </label>
                      <div className="relative">
                        <textarea
                          value={prompt}
                          onChange={(e) => setPrompt(e.target.value)}
                          placeholder="Write your idea here... (e.g., 'a golden dragon flying over a cyberpunk city at sunset')"
                          className="w-full h-40 p-6 bg-white/10 backdrop-blur-sm border border-white/20 rounded-2xl resize-none focus:ring-2 focus:ring-purple-400 focus:border-transparent outline-none text-white placeholder-purple-200 text-lg leading-relaxed transition-all duration-300 hover:bg-white/15 focus:shadow-glow"
                          maxLength={500}
                        />
                        <div className="absolute bottom-4 right-4 text-purple-300 text-sm">
                          {prompt.length}/500
                        </div>
                      </div>
                    </div>

                    {/* Status */}
                    {prompt && (
                      <div className="p-4 bg-gradient-to-r from-purple-500/20 to-pink-500/20 rounded-2xl border border-purple-400/30 animate-scaleIn">
                        {isLoading ? (
                          <div className="flex items-center gap-3 text-white">
                            <Loader2 className="w-5 h-5 animate-spin text-purple-300" />
                            <span className="font-medium">Creating your masterpiece...</span>
                          </div>
                        ) : (
                          <div className="space-y-2">
                            <div className="flex items-center gap-3 text-purple-100">
                              <Sparkles className="w-5 h-5 text-yellow-400" />
                              <span>Ready for: "{debouncedPrompt}"</span>
                            </div>
                            <div className="text-xs text-purple-200 space-y-1">
                              <div>Size: {generationParams.width}×{generationParams.height} • Steps: {generationParams.steps}</div>
                              <div>Seed: {getEffectiveSeed() || 'Random'} • Model: {generationParams.model.split('/')[1]}</div>
                            </div>
                          </div>
                        )}
                      </div>
                    )}
                  </div>
                </div>

                {/* Quick Prompts */}
                <div className="bg-white/10 backdrop-blur-xl rounded-3xl p-6 border border-white/20 shadow-2xl hover-lift">
                  <h3 className="text-lg font-bold text-white mb-4 flex items-center gap-2">
                    <Zap className="w-5 h-5 text-yellow-400" />
                    Quick Inspiration
                  </h3>
                  <div className="grid grid-cols-1 gap-2">
                    {[
                      "a magical castle floating in the clouds",
                      "a robot painting a masterpiece",
                      "a glowing crystal forest",
                      "a futuristic underwater city"
                    ].map((suggestion, index) => (
                      <button
                        key={index}
                        onClick={() => setPrompt(suggestion)}
                        className="text-left p-3 bg-white/5 hover:bg-white/15 rounded-xl border border-white/10 text-purple-100 hover:text-white transition-all duration-200 text-sm hover:shadow-glow transform hover:scale-[1.02]"
                      >
                        {suggestion}
                      </button>
                    ))}
                  </div>
                </div>
              </div>

              {/* Image Display */}
              <div className="bg-white/10 backdrop-blur-xl rounded-3xl p-8 border border-white/20 shadow-2xl min-h-[600px] flex flex-col hover-lift animate-slideInRight">
                <div className="flex items-center justify-between mb-6">
                  <h2 className="text-2xl font-bold text-white flex items-center gap-2">
                    <Sparkles className="w-6 h-6 text-yellow-400" />
                    Your Creation
                  </h2>
                  {data && (
                    <div className="flex gap-2 animate-scaleIn">
                      <button
                        onClick={downloadImage}
                        className="p-3 bg-gradient-to-r from-green-500 to-emerald-500 hover:from-green-600 hover:to-emerald-600 rounded-xl text-white transition-all duration-200 shadow-lg hover:shadow-xl transform hover:scale-105"
                        title="Download image"
                      >
                        <Download className="w-5 h-5" />
                      </button>
                      <button
                        onClick={shareImage}
                        className="p-3 bg-gradient-to-r from-blue-500 to-cyan-500 hover:from-blue-600 hover:to-cyan-600 rounded-xl text-white transition-all duration-200 shadow-lg hover:shadow-xl transform hover:scale-105"
                        title="Share image"
                      >
                        <Share2 className="w-5 h-5" />
                      </button>
                    </div>
                  )}
                </div>

                <div className="flex-1 flex items-center justify-center">
                  {error && (
                    <div className="text-center py-12 animate-scaleIn">
                      <div className="w-16 h-16 bg-red-500/20 rounded-full flex items-center justify-center mx-auto mb-4">
                        <span className="text-2xl">😔</span>
                      </div>
                      <div className="text-red-300 mb-2 font-medium">Oops! Something went wrong</div>
                      <div className="text-red-200 text-sm max-w-md mx-auto">
                        {error instanceof Error ? error.message : 'Unknown error'}
                      </div>
                    </div>
                  )}

                  {!prompt.trim() && !data && (
                    <div className="text-center py-12 animate-scaleIn">
                      <div className="w-24 h-24 bg-gradient-to-br from-purple-400 to-pink-400 rounded-full flex items-center justify-center mx-auto mb-6 animate-pulse">
                        <Wand2 className="w-12 h-12 text-white" />
                      </div>
                      <h3 className="text-2xl font-bold text-white mb-2">Start Creating!</h3>
                      <p className="text-purple-200 max-w-md mx-auto">
                        Write a description in the text box to see AI magic in action
                      </p>
                    </div>
                  )}

                  {isLoading && (
                    <div className="text-center py-12">
                      <LoadingSpinner size="lg" text="AI is painting your vision" />
                    </div>
                  )}

                  {data && !isLoading && (
                    <div className="w-full animate-scaleIn">
                      <div className="relative group">
                        <img
                          src={`data:image/png;base64,${data.b64_json}`}
                          alt={prompt}
                          className="w-full h-auto rounded-2xl shadow-2xl transition-transform duration-300 group-hover:scale-[1.02]"
                          style={{ maxHeight: '500px', objectFit: 'contain' }}
                        />
                        <div className="absolute inset-0 bg-gradient-to-t from-black/20 to-transparent rounded-2xl opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
                      </div>
                      <div className="mt-4 p-4 bg-white/5 rounded-xl border border-white/10">
                        <p className="text-purple-100 text-sm text-center">
                          <span className="font-medium">Generated with {generationParams.model.split('/')[1]}</span>
                          <br />
                          <span className="text-xs">
                            {generationParams.width}×{generationParams.height} • {generationParams.steps} steps • Seed: {data.seed || getEffectiveSeed() || 'Random'}
                          </span>
                        </p>
                      </div>
                    </div>
                  )}
                </div>
              </div>
            </div>

            {/* Footer */}
            <div className="text-center mt-16 pb-8 animate-fadeInUp">
              <div className="bg-white/5 backdrop-blur-sm rounded-2xl p-6 border border-white/10 max-w-2xl mx-auto hover-lift">
                <p className="text-purple-200 text-sm leading-relaxed">
                  Built with ❤️ using{' '}
                  <a
                    href="https://together.ai"
                    target="_blank"
                    rel="noopener noreferrer"
                    className="text-purple-300 hover:text-white transition-colors duration-200 font-medium"
                  >
                    Together AI
                  </a>{' '}
                  and{' '}
                  <a
                    href="https://blackforestlabs.ai"
                    target="_blank"
                    rel="noopener noreferrer"
                    className="text-purple-300 hover:text-white transition-colors duration-200 font-medium"
                  >
                    Black Forest Labs FLUX
                  </a>
                </p>
              </div>
            </div>
          </div>
        </div>
      </div>
    </ClientOnly>
  )
} 